// Code generated by counterfeiter. DO NOT EDIT.
package reporterfakes

import (
	"context"
	"drift-watcher/pkg/services/driftchecker"
	"drift-watcher/pkg/services/reporter"
	"sync"
)

type FakeOutputWriter struct {
	WriteReportStub        func(context.Context, *driftchecker.DriftReport) error
	writeReportMutex       sync.RWMutex
	writeReportArgsForCall []struct {
		arg1 context.Context
		arg2 *driftchecker.DriftReport
	}
	writeReportReturns struct {
		result1 error
	}
	writeReportReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOutputWriter) WriteReport(arg1 context.Context, arg2 *driftchecker.DriftReport) error {
	fake.writeReportMutex.Lock()
	ret, specificReturn := fake.writeReportReturnsOnCall[len(fake.writeReportArgsForCall)]
	fake.writeReportArgsForCall = append(fake.writeReportArgsForCall, struct {
		arg1 context.Context
		arg2 *driftchecker.DriftReport
	}{arg1, arg2})
	stub := fake.WriteReportStub
	fakeReturns := fake.writeReportReturns
	fake.recordInvocation("WriteReport", []interface{}{arg1, arg2})
	fake.writeReportMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOutputWriter) WriteReportCallCount() int {
	fake.writeReportMutex.RLock()
	defer fake.writeReportMutex.RUnlock()
	return len(fake.writeReportArgsForCall)
}

func (fake *FakeOutputWriter) WriteReportCalls(stub func(context.Context, *driftchecker.DriftReport) error) {
	fake.writeReportMutex.Lock()
	defer fake.writeReportMutex.Unlock()
	fake.WriteReportStub = stub
}

func (fake *FakeOutputWriter) WriteReportArgsForCall(i int) (context.Context, *driftchecker.DriftReport) {
	fake.writeReportMutex.RLock()
	defer fake.writeReportMutex.RUnlock()
	argsForCall := fake.writeReportArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOutputWriter) WriteReportReturns(result1 error) {
	fake.writeReportMutex.Lock()
	defer fake.writeReportMutex.Unlock()
	fake.WriteReportStub = nil
	fake.writeReportReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOutputWriter) WriteReportReturnsOnCall(i int, result1 error) {
	fake.writeReportMutex.Lock()
	defer fake.writeReportMutex.Unlock()
	fake.WriteReportStub = nil
	if fake.writeReportReturnsOnCall == nil {
		fake.writeReportReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReportReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOutputWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeReportMutex.RLock()
	defer fake.writeReportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOutputWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reporter.OutputWriter = new(FakeOutputWriter)

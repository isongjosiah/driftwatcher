// Code generated by counterfeiter. DO NOT EDIT.
package providerfakes

import (
	"drift-watcher/pkg/services/provider"
	"sync"
)

type FakeInfrastructureResourceI struct {
	AttributeValueStub        func(string) (string, error)
	attributeValueMutex       sync.RWMutex
	attributeValueArgsForCall []struct {
		arg1 string
	}
	attributeValueReturns struct {
		result1 string
		result2 error
	}
	attributeValueReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ResourceTypeStub        func() string
	resourceTypeMutex       sync.RWMutex
	resourceTypeArgsForCall []struct {
	}
	resourceTypeReturns struct {
		result1 string
	}
	resourceTypeReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInfrastructureResourceI) AttributeValue(arg1 string) (string, error) {
	fake.attributeValueMutex.Lock()
	ret, specificReturn := fake.attributeValueReturnsOnCall[len(fake.attributeValueArgsForCall)]
	fake.attributeValueArgsForCall = append(fake.attributeValueArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.AttributeValueStub
	fakeReturns := fake.attributeValueReturns
	fake.recordInvocation("AttributeValue", []interface{}{arg1})
	fake.attributeValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInfrastructureResourceI) AttributeValueCallCount() int {
	fake.attributeValueMutex.RLock()
	defer fake.attributeValueMutex.RUnlock()
	return len(fake.attributeValueArgsForCall)
}

func (fake *FakeInfrastructureResourceI) AttributeValueCalls(stub func(string) (string, error)) {
	fake.attributeValueMutex.Lock()
	defer fake.attributeValueMutex.Unlock()
	fake.AttributeValueStub = stub
}

func (fake *FakeInfrastructureResourceI) AttributeValueArgsForCall(i int) string {
	fake.attributeValueMutex.RLock()
	defer fake.attributeValueMutex.RUnlock()
	argsForCall := fake.attributeValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInfrastructureResourceI) AttributeValueReturns(result1 string, result2 error) {
	fake.attributeValueMutex.Lock()
	defer fake.attributeValueMutex.Unlock()
	fake.AttributeValueStub = nil
	fake.attributeValueReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInfrastructureResourceI) AttributeValueReturnsOnCall(i int, result1 string, result2 error) {
	fake.attributeValueMutex.Lock()
	defer fake.attributeValueMutex.Unlock()
	fake.AttributeValueStub = nil
	if fake.attributeValueReturnsOnCall == nil {
		fake.attributeValueReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.attributeValueReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInfrastructureResourceI) ResourceType() string {
	fake.resourceTypeMutex.Lock()
	ret, specificReturn := fake.resourceTypeReturnsOnCall[len(fake.resourceTypeArgsForCall)]
	fake.resourceTypeArgsForCall = append(fake.resourceTypeArgsForCall, struct {
	}{})
	stub := fake.ResourceTypeStub
	fakeReturns := fake.resourceTypeReturns
	fake.recordInvocation("ResourceType", []interface{}{})
	fake.resourceTypeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInfrastructureResourceI) ResourceTypeCallCount() int {
	fake.resourceTypeMutex.RLock()
	defer fake.resourceTypeMutex.RUnlock()
	return len(fake.resourceTypeArgsForCall)
}

func (fake *FakeInfrastructureResourceI) ResourceTypeCalls(stub func() string) {
	fake.resourceTypeMutex.Lock()
	defer fake.resourceTypeMutex.Unlock()
	fake.ResourceTypeStub = stub
}

func (fake *FakeInfrastructureResourceI) ResourceTypeReturns(result1 string) {
	fake.resourceTypeMutex.Lock()
	defer fake.resourceTypeMutex.Unlock()
	fake.ResourceTypeStub = nil
	fake.resourceTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInfrastructureResourceI) ResourceTypeReturnsOnCall(i int, result1 string) {
	fake.resourceTypeMutex.Lock()
	defer fake.resourceTypeMutex.Unlock()
	fake.ResourceTypeStub = nil
	if fake.resourceTypeReturnsOnCall == nil {
		fake.resourceTypeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.resourceTypeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInfrastructureResourceI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attributeValueMutex.RLock()
	defer fake.attributeValueMutex.RUnlock()
	fake.resourceTypeMutex.RLock()
	defer fake.resourceTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInfrastructureResourceI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ provider.InfrastructureResourceI = new(FakeInfrastructureResourceI)

// Code generated by counterfeiter. DO NOT EDIT.
package providerfakes

import (
	"context"
	"drift-watcher/pkg/services/provider"
	"drift-watcher/pkg/services/statemanager"
	"sync"
)

type FakeProviderI struct {
	InfrastructreMetadataStub        func(context.Context, string, statemanager.StateResource) (provider.InfrastructureResourceI, error)
	infrastructreMetadataMutex       sync.RWMutex
	infrastructreMetadataArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 statemanager.StateResource
	}
	infrastructreMetadataReturns struct {
		result1 provider.InfrastructureResourceI
		result2 error
	}
	infrastructreMetadataReturnsOnCall map[int]struct {
		result1 provider.InfrastructureResourceI
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProviderI) InfrastructreMetadata(arg1 context.Context, arg2 string, arg3 statemanager.StateResource) (provider.InfrastructureResourceI, error) {
	fake.infrastructreMetadataMutex.Lock()
	ret, specificReturn := fake.infrastructreMetadataReturnsOnCall[len(fake.infrastructreMetadataArgsForCall)]
	fake.infrastructreMetadataArgsForCall = append(fake.infrastructreMetadataArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 statemanager.StateResource
	}{arg1, arg2, arg3})
	stub := fake.InfrastructreMetadataStub
	fakeReturns := fake.infrastructreMetadataReturns
	fake.recordInvocation("InfrastructreMetadata", []interface{}{arg1, arg2, arg3})
	fake.infrastructreMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderI) InfrastructreMetadataCallCount() int {
	fake.infrastructreMetadataMutex.RLock()
	defer fake.infrastructreMetadataMutex.RUnlock()
	return len(fake.infrastructreMetadataArgsForCall)
}

func (fake *FakeProviderI) InfrastructreMetadataCalls(stub func(context.Context, string, statemanager.StateResource) (provider.InfrastructureResourceI, error)) {
	fake.infrastructreMetadataMutex.Lock()
	defer fake.infrastructreMetadataMutex.Unlock()
	fake.InfrastructreMetadataStub = stub
}

func (fake *FakeProviderI) InfrastructreMetadataArgsForCall(i int) (context.Context, string, statemanager.StateResource) {
	fake.infrastructreMetadataMutex.RLock()
	defer fake.infrastructreMetadataMutex.RUnlock()
	argsForCall := fake.infrastructreMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderI) InfrastructreMetadataReturns(result1 provider.InfrastructureResourceI, result2 error) {
	fake.infrastructreMetadataMutex.Lock()
	defer fake.infrastructreMetadataMutex.Unlock()
	fake.InfrastructreMetadataStub = nil
	fake.infrastructreMetadataReturns = struct {
		result1 provider.InfrastructureResourceI
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderI) InfrastructreMetadataReturnsOnCall(i int, result1 provider.InfrastructureResourceI, result2 error) {
	fake.infrastructreMetadataMutex.Lock()
	defer fake.infrastructreMetadataMutex.Unlock()
	fake.InfrastructreMetadataStub = nil
	if fake.infrastructreMetadataReturnsOnCall == nil {
		fake.infrastructreMetadataReturnsOnCall = make(map[int]struct {
			result1 provider.InfrastructureResourceI
			result2 error
		})
	}
	fake.infrastructreMetadataReturnsOnCall[i] = struct {
		result1 provider.InfrastructureResourceI
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.infrastructreMetadataMutex.RLock()
	defer fake.infrastructreMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProviderI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ provider.ProviderI = new(FakeProviderI)

// Code generated by counterfeiter. DO NOT EDIT.
package driftcheckerfakes

import (
	"context"
	"drift-watcher/pkg/services/driftchecker"
	"drift-watcher/pkg/services/provider"
	"drift-watcher/pkg/services/statemanager"
	"sync"
)

type FakeDriftChecker struct {
	CompareStatesStub        func(context.Context, provider.InfrastructureResourceI, statemanager.StateResource, []string) (*driftchecker.DriftReport, error)
	compareStatesMutex       sync.RWMutex
	compareStatesArgsForCall []struct {
		arg1 context.Context
		arg2 provider.InfrastructureResourceI
		arg3 statemanager.StateResource
		arg4 []string
	}
	compareStatesReturns struct {
		result1 *driftchecker.DriftReport
		result2 error
	}
	compareStatesReturnsOnCall map[int]struct {
		result1 *driftchecker.DriftReport
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriftChecker) CompareStates(arg1 context.Context, arg2 provider.InfrastructureResourceI, arg3 statemanager.StateResource, arg4 []string) (*driftchecker.DriftReport, error) {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.compareStatesMutex.Lock()
	ret, specificReturn := fake.compareStatesReturnsOnCall[len(fake.compareStatesArgsForCall)]
	fake.compareStatesArgsForCall = append(fake.compareStatesArgsForCall, struct {
		arg1 context.Context
		arg2 provider.InfrastructureResourceI
		arg3 statemanager.StateResource
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.CompareStatesStub
	fakeReturns := fake.compareStatesReturns
	fake.recordInvocation("CompareStates", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.compareStatesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDriftChecker) CompareStatesCallCount() int {
	fake.compareStatesMutex.RLock()
	defer fake.compareStatesMutex.RUnlock()
	return len(fake.compareStatesArgsForCall)
}

func (fake *FakeDriftChecker) CompareStatesCalls(stub func(context.Context, provider.InfrastructureResourceI, statemanager.StateResource, []string) (*driftchecker.DriftReport, error)) {
	fake.compareStatesMutex.Lock()
	defer fake.compareStatesMutex.Unlock()
	fake.CompareStatesStub = stub
}

func (fake *FakeDriftChecker) CompareStatesArgsForCall(i int) (context.Context, provider.InfrastructureResourceI, statemanager.StateResource, []string) {
	fake.compareStatesMutex.RLock()
	defer fake.compareStatesMutex.RUnlock()
	argsForCall := fake.compareStatesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDriftChecker) CompareStatesReturns(result1 *driftchecker.DriftReport, result2 error) {
	fake.compareStatesMutex.Lock()
	defer fake.compareStatesMutex.Unlock()
	fake.CompareStatesStub = nil
	fake.compareStatesReturns = struct {
		result1 *driftchecker.DriftReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDriftChecker) CompareStatesReturnsOnCall(i int, result1 *driftchecker.DriftReport, result2 error) {
	fake.compareStatesMutex.Lock()
	defer fake.compareStatesMutex.Unlock()
	fake.CompareStatesStub = nil
	if fake.compareStatesReturnsOnCall == nil {
		fake.compareStatesReturnsOnCall = make(map[int]struct {
			result1 *driftchecker.DriftReport
			result2 error
		})
	}
	fake.compareStatesReturnsOnCall[i] = struct {
		result1 *driftchecker.DriftReport
		result2 error
	}{result1, result2}
}

func (fake *FakeDriftChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compareStatesMutex.RLock()
	defer fake.compareStatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDriftChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driftchecker.DriftChecker = new(FakeDriftChecker)

// Code generated by counterfeiter. DO NOT EDIT.
package statemanagerfakes

import (
	"context"
	"drift-watcher/pkg/services/statemanager"
	"sync"
)

type FakeStateManagerI struct {
	ParseStateFileStub        func(context.Context, string) (statemanager.StateContent, error)
	parseStateFileMutex       sync.RWMutex
	parseStateFileArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	parseStateFileReturns struct {
		result1 statemanager.StateContent
		result2 error
	}
	parseStateFileReturnsOnCall map[int]struct {
		result1 statemanager.StateContent
		result2 error
	}
	RetrieveResourcesStub        func(context.Context, statemanager.StateContent, string) ([]statemanager.StateResource, error)
	retrieveResourcesMutex       sync.RWMutex
	retrieveResourcesArgsForCall []struct {
		arg1 context.Context
		arg2 statemanager.StateContent
		arg3 string
	}
	retrieveResourcesReturns struct {
		result1 []statemanager.StateResource
		result2 error
	}
	retrieveResourcesReturnsOnCall map[int]struct {
		result1 []statemanager.StateResource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateManagerI) ParseStateFile(arg1 context.Context, arg2 string) (statemanager.StateContent, error) {
	fake.parseStateFileMutex.Lock()
	ret, specificReturn := fake.parseStateFileReturnsOnCall[len(fake.parseStateFileArgsForCall)]
	fake.parseStateFileArgsForCall = append(fake.parseStateFileArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ParseStateFileStub
	fakeReturns := fake.parseStateFileReturns
	fake.recordInvocation("ParseStateFile", []interface{}{arg1, arg2})
	fake.parseStateFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStateManagerI) ParseStateFileCallCount() int {
	fake.parseStateFileMutex.RLock()
	defer fake.parseStateFileMutex.RUnlock()
	return len(fake.parseStateFileArgsForCall)
}

func (fake *FakeStateManagerI) ParseStateFileCalls(stub func(context.Context, string) (statemanager.StateContent, error)) {
	fake.parseStateFileMutex.Lock()
	defer fake.parseStateFileMutex.Unlock()
	fake.ParseStateFileStub = stub
}

func (fake *FakeStateManagerI) ParseStateFileArgsForCall(i int) (context.Context, string) {
	fake.parseStateFileMutex.RLock()
	defer fake.parseStateFileMutex.RUnlock()
	argsForCall := fake.parseStateFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStateManagerI) ParseStateFileReturns(result1 statemanager.StateContent, result2 error) {
	fake.parseStateFileMutex.Lock()
	defer fake.parseStateFileMutex.Unlock()
	fake.ParseStateFileStub = nil
	fake.parseStateFileReturns = struct {
		result1 statemanager.StateContent
		result2 error
	}{result1, result2}
}

func (fake *FakeStateManagerI) ParseStateFileReturnsOnCall(i int, result1 statemanager.StateContent, result2 error) {
	fake.parseStateFileMutex.Lock()
	defer fake.parseStateFileMutex.Unlock()
	fake.ParseStateFileStub = nil
	if fake.parseStateFileReturnsOnCall == nil {
		fake.parseStateFileReturnsOnCall = make(map[int]struct {
			result1 statemanager.StateContent
			result2 error
		})
	}
	fake.parseStateFileReturnsOnCall[i] = struct {
		result1 statemanager.StateContent
		result2 error
	}{result1, result2}
}

func (fake *FakeStateManagerI) RetrieveResources(arg1 context.Context, arg2 statemanager.StateContent, arg3 string) ([]statemanager.StateResource, error) {
	fake.retrieveResourcesMutex.Lock()
	ret, specificReturn := fake.retrieveResourcesReturnsOnCall[len(fake.retrieveResourcesArgsForCall)]
	fake.retrieveResourcesArgsForCall = append(fake.retrieveResourcesArgsForCall, struct {
		arg1 context.Context
		arg2 statemanager.StateContent
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RetrieveResourcesStub
	fakeReturns := fake.retrieveResourcesReturns
	fake.recordInvocation("RetrieveResources", []interface{}{arg1, arg2, arg3})
	fake.retrieveResourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStateManagerI) RetrieveResourcesCallCount() int {
	fake.retrieveResourcesMutex.RLock()
	defer fake.retrieveResourcesMutex.RUnlock()
	return len(fake.retrieveResourcesArgsForCall)
}

func (fake *FakeStateManagerI) RetrieveResourcesCalls(stub func(context.Context, statemanager.StateContent, string) ([]statemanager.StateResource, error)) {
	fake.retrieveResourcesMutex.Lock()
	defer fake.retrieveResourcesMutex.Unlock()
	fake.RetrieveResourcesStub = stub
}

func (fake *FakeStateManagerI) RetrieveResourcesArgsForCall(i int) (context.Context, statemanager.StateContent, string) {
	fake.retrieveResourcesMutex.RLock()
	defer fake.retrieveResourcesMutex.RUnlock()
	argsForCall := fake.retrieveResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStateManagerI) RetrieveResourcesReturns(result1 []statemanager.StateResource, result2 error) {
	fake.retrieveResourcesMutex.Lock()
	defer fake.retrieveResourcesMutex.Unlock()
	fake.RetrieveResourcesStub = nil
	fake.retrieveResourcesReturns = struct {
		result1 []statemanager.StateResource
		result2 error
	}{result1, result2}
}

func (fake *FakeStateManagerI) RetrieveResourcesReturnsOnCall(i int, result1 []statemanager.StateResource, result2 error) {
	fake.retrieveResourcesMutex.Lock()
	defer fake.retrieveResourcesMutex.Unlock()
	fake.RetrieveResourcesStub = nil
	if fake.retrieveResourcesReturnsOnCall == nil {
		fake.retrieveResourcesReturnsOnCall = make(map[int]struct {
			result1 []statemanager.StateResource
			result2 error
		})
	}
	fake.retrieveResourcesReturnsOnCall[i] = struct {
		result1 []statemanager.StateResource
		result2 error
	}{result1, result2}
}

func (fake *FakeStateManagerI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseStateFileMutex.RLock()
	defer fake.parseStateFileMutex.RUnlock()
	fake.retrieveResourcesMutex.RLock()
	defer fake.retrieveResourcesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateManagerI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ statemanager.StateManagerI = new(FakeStateManagerI)

// Code generated by counterfeiter. DO NOT EDIT.
package providerfakes

import (
	"context"
	"drift-watcher/pkg/provider"
	"drift-watcher/pkg/terraform"
	"sync"
)

type FakeProviderI struct {
	CompareActiveAndDesiredStateStub        func(context.Context, string, *provider.InfrastructureResource, terraform.Resource, []string) (provider.DriftReport, error)
	compareActiveAndDesiredStateMutex       sync.RWMutex
	compareActiveAndDesiredStateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *provider.InfrastructureResource
		arg4 terraform.Resource
		arg5 []string
	}
	compareActiveAndDesiredStateReturns struct {
		result1 provider.DriftReport
		result2 error
	}
	compareActiveAndDesiredStateReturnsOnCall map[int]struct {
		result1 provider.DriftReport
		result2 error
	}
	InfrastructreMetadataStub        func(context.Context, string, map[string]string) (*provider.InfrastructureResource, error)
	infrastructreMetadataMutex       sync.RWMutex
	infrastructreMetadataArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]string
	}
	infrastructreMetadataReturns struct {
		result1 *provider.InfrastructureResource
		result2 error
	}
	infrastructreMetadataReturnsOnCall map[int]struct {
		result1 *provider.InfrastructureResource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProviderI) CompareActiveAndDesiredState(arg1 context.Context, arg2 string, arg3 *provider.InfrastructureResource, arg4 terraform.Resource, arg5 []string) (provider.DriftReport, error) {
	var arg5Copy []string
	if arg5 != nil {
		arg5Copy = make([]string, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.compareActiveAndDesiredStateMutex.Lock()
	ret, specificReturn := fake.compareActiveAndDesiredStateReturnsOnCall[len(fake.compareActiveAndDesiredStateArgsForCall)]
	fake.compareActiveAndDesiredStateArgsForCall = append(fake.compareActiveAndDesiredStateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *provider.InfrastructureResource
		arg4 terraform.Resource
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5Copy})
	stub := fake.CompareActiveAndDesiredStateStub
	fakeReturns := fake.compareActiveAndDesiredStateReturns
	fake.recordInvocation("CompareActiveAndDesiredState", []interface{}{arg1, arg2, arg3, arg4, arg5Copy})
	fake.compareActiveAndDesiredStateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderI) CompareActiveAndDesiredStateCallCount() int {
	fake.compareActiveAndDesiredStateMutex.RLock()
	defer fake.compareActiveAndDesiredStateMutex.RUnlock()
	return len(fake.compareActiveAndDesiredStateArgsForCall)
}

func (fake *FakeProviderI) CompareActiveAndDesiredStateCalls(stub func(context.Context, string, *provider.InfrastructureResource, terraform.Resource, []string) (provider.DriftReport, error)) {
	fake.compareActiveAndDesiredStateMutex.Lock()
	defer fake.compareActiveAndDesiredStateMutex.Unlock()
	fake.CompareActiveAndDesiredStateStub = stub
}

func (fake *FakeProviderI) CompareActiveAndDesiredStateArgsForCall(i int) (context.Context, string, *provider.InfrastructureResource, terraform.Resource, []string) {
	fake.compareActiveAndDesiredStateMutex.RLock()
	defer fake.compareActiveAndDesiredStateMutex.RUnlock()
	argsForCall := fake.compareActiveAndDesiredStateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeProviderI) CompareActiveAndDesiredStateReturns(result1 provider.DriftReport, result2 error) {
	fake.compareActiveAndDesiredStateMutex.Lock()
	defer fake.compareActiveAndDesiredStateMutex.Unlock()
	fake.CompareActiveAndDesiredStateStub = nil
	fake.compareActiveAndDesiredStateReturns = struct {
		result1 provider.DriftReport
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderI) CompareActiveAndDesiredStateReturnsOnCall(i int, result1 provider.DriftReport, result2 error) {
	fake.compareActiveAndDesiredStateMutex.Lock()
	defer fake.compareActiveAndDesiredStateMutex.Unlock()
	fake.CompareActiveAndDesiredStateStub = nil
	if fake.compareActiveAndDesiredStateReturnsOnCall == nil {
		fake.compareActiveAndDesiredStateReturnsOnCall = make(map[int]struct {
			result1 provider.DriftReport
			result2 error
		})
	}
	fake.compareActiveAndDesiredStateReturnsOnCall[i] = struct {
		result1 provider.DriftReport
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderI) InfrastructreMetadata(arg1 context.Context, arg2 string, arg3 map[string]string) (*provider.InfrastructureResource, error) {
	fake.infrastructreMetadataMutex.Lock()
	ret, specificReturn := fake.infrastructreMetadataReturnsOnCall[len(fake.infrastructreMetadataArgsForCall)]
	fake.infrastructreMetadataArgsForCall = append(fake.infrastructreMetadataArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.InfrastructreMetadataStub
	fakeReturns := fake.infrastructreMetadataReturns
	fake.recordInvocation("InfrastructreMetadata", []interface{}{arg1, arg2, arg3})
	fake.infrastructreMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderI) InfrastructreMetadataCallCount() int {
	fake.infrastructreMetadataMutex.RLock()
	defer fake.infrastructreMetadataMutex.RUnlock()
	return len(fake.infrastructreMetadataArgsForCall)
}

func (fake *FakeProviderI) InfrastructreMetadataCalls(stub func(context.Context, string, map[string]string) (*provider.InfrastructureResource, error)) {
	fake.infrastructreMetadataMutex.Lock()
	defer fake.infrastructreMetadataMutex.Unlock()
	fake.InfrastructreMetadataStub = stub
}

func (fake *FakeProviderI) InfrastructreMetadataArgsForCall(i int) (context.Context, string, map[string]string) {
	fake.infrastructreMetadataMutex.RLock()
	defer fake.infrastructreMetadataMutex.RUnlock()
	argsForCall := fake.infrastructreMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderI) InfrastructreMetadataReturns(result1 *provider.InfrastructureResource, result2 error) {
	fake.infrastructreMetadataMutex.Lock()
	defer fake.infrastructreMetadataMutex.Unlock()
	fake.InfrastructreMetadataStub = nil
	fake.infrastructreMetadataReturns = struct {
		result1 *provider.InfrastructureResource
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderI) InfrastructreMetadataReturnsOnCall(i int, result1 *provider.InfrastructureResource, result2 error) {
	fake.infrastructreMetadataMutex.Lock()
	defer fake.infrastructreMetadataMutex.Unlock()
	fake.InfrastructreMetadataStub = nil
	if fake.infrastructreMetadataReturnsOnCall == nil {
		fake.infrastructreMetadataReturnsOnCall = make(map[int]struct {
			result1 *provider.InfrastructureResource
			result2 error
		})
	}
	fake.infrastructreMetadataReturnsOnCall[i] = struct {
		result1 *provider.InfrastructureResource
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compareActiveAndDesiredStateMutex.RLock()
	defer fake.compareActiveAndDesiredStateMutex.RUnlock()
	fake.infrastructreMetadataMutex.RLock()
	defer fake.infrastructreMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProviderI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ provider.ProviderI = new(FakeProviderI)
